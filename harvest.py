############
# Part 1   #
############


class MelonType(object):
    """A species of melon at a melon farm."""

    def __init__(self, code, first_harvest, color, is_seedless, is_bestseller, 
                 name):
        """Initialize a melon."""
        self.code = code
        self.first_harvest = first_harvest
        self.color = color
        self.is_seedless = is_seedless
        self.is_bestseller = is_bestseller
        self.name = name

        self.pairings = []

        # Fill in the rest

    def add_pairing(self, pairing):
        """Add a food pairing to the instance's pairings list."""

        # Fill in the rest
        self.pairings.append(pairing)

    def update_code(self, new_code):
        """Replace the reporting code with the new_code."""

        # Fill in the rest
        self.code = new_code

def make_melon_types():
    """Returns a list of current melon types."""

    all_melon_types = []


    # Fill in the rest
    muskmelon = MelonType('musk', 1998, 'green', 'seedless', True, 'Muskmelon')
    casaba = MelonType('cas', 2003, 'orange', 'has seeds', False, 'Casaba')
    crenshaw = MelonType('cren', 1996, 'green', 'has seeds', False, 'Crenshaw')
    yellow_watermelon = MelonType('yw', 2013, 'yellow', 'has seeds', True, 'Yellow Watermelon')

    muskmelon.add_pairing('mint')
    casaba.add_pairing('strawberries')
    casaba.add_pairing('mint')
    crenshaw.add_pairing('proscuitto')
    yellow_watermelon.add_pairing('ice cream')

    all_melon_types.append(casaba)
    all_melon_types.append(muskmelon)
    all_melon_types.append(crenshaw)
    all_melon_types.append(yellow_watermelon)

    return all_melon_types

def print_pairing_info(melon_types):
    """Prints information about each melon type's pairings."""
    #melon_types is the list generated by the make_melon_types function

    # Fill in the rest

    for melon in melon_types:
        print(f"{melon.name} pairs with")
        for pairing in melon.pairings:
            print(f"-{pairing}")

#print_pairing_info(make_melon_types())

def make_melon_type_lookup(melon_types):
    """Takes a list of MelonTypes and returns a dictionary of melon type by code."""
    #melon_types is the list generated by the make_melon_types function

    # Fill in the rest
    melon_dictionary = {}

    for melon in melon_types:
        reporting_code = melon.code
        melon_dictionary[reporting_code] = melon.name

    return melon_dictionary

#print(make_melon_type_lookup(make_melon_types()))

############
# Part 2   #
############

class Melon(object):
    """A melon in a melon harvest."""
    def __init__(self, melon_type, shape_rating, color_rating, field, 
        harvested_by):

        self.melon_type = melon_type
        self.shape_rating = shape_rating
        self.color_rating = color_rating
        self.field = field
        self.harvested_by = harvested_by


    def is_sellable(self, shape_rating, color_rating, field):
        if shape_rating > 5 and color_rating > 5 and field != 3: 
            return True
        else: 
            return False

    # Needs __init__ and is_sellable methods

def make_melons(melon_types):
    """Returns a list of Melon objects."""

    # Fill in the rest
    melons_by_id = make_melon_type_lookup(melon_types)

    melon1 = Melon(melons_by_id['yw'], 8, 7, 2, 'Sheila')
    melon2 = Melon(melons_by_id['yw'], 3, 4, 2, 'Sheila')
    melon3 = Melon(melons_by_id['yw'], 9, 8, 3, 'Sheila')
    melon4 = Melon(melons_by_id['cas'], 10, 6, 35, 'Sheila')
    melon5 = Melon(melons_by_id['cren'], 8, 9, 35, 'Michael')
    melon6 = Melon(melons_by_id['cren'], 8, 2, 35, 'Michael')
    melon7 = Melon(melons_by_id['cren'], 2, 3, 4, 'Michael')
    melon8 = Melon(melons_by_id['musk'], 6, 7, 4, 'Michael')
    melon9 = Melon(melons_by_id['yw'], 7, 10, 3, 'Sheila')

    melon_list2 = [melon1, melon2, melon3, melon4, melon5, melon6, melon7, melon8, melon9]

    return melon_list2

def get_sellability_report(melons):
    """Given a list of melon object, prints whether each one is sellable."""

    # Fill in the rest 
    for melon in melons:
        if melon.is_sellable(melon.shape_rating, melon.color_rating, melon.field) == True:
            is_sellable = '(CAN BE SOLD)'
        else:
            is_sellable = '(NOT SELLABLE)'

        print(f"Harvested by {melon.harvested_by} from Field {melon.field} {is_sellable}")





melon_types = make_melon_types()
melons_list2 = make_melons(melon_types)
get_sellability_report(melons_list2)


